{"version":3,"sources":["logo.svg","components/Inner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Inner","props","humidity","undefined","console","log","temp","btnid","Math","round","String","fromCharCode","className","type","placeholder","value","val","onChange","e","cityChange","target","onClick","search","weather","App","useState","setData","city","setCity","setTemp","setHumidity","setBtnid","setWeather","apiKey","a","axios","get","res","data","main","getData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,uICsE5BC,G,WAnED,SAAAC,GAQZ,IAAMC,OACeC,IAAnBF,EAAMC,SAAN,qBAA6CD,EAAMC,UAAa,GAElEE,QAAQC,IAAIH,GACZ,IAAMI,OACWH,IAAfF,EAAMK,KACa,GAAfL,EAAMM,MAAN,UACKC,KAAKC,MAAMR,EAAMK,KAAO,QAAUI,OAAOC,aAAa,KAD3D,eAEK,KAAOH,KAAKC,MAAMR,EAAMK,MAAQ,KAAO,GAF5C,KAGA,GAEN,OACE,oCACE,yBAAKM,UAAU,YASb,2BACEA,UAAU,SACVC,KAAK,OACLC,YAAY,aACZC,MAAOd,EAAMe,IACbC,SAAU,SAAAC,GACR,OAAOjB,EAAMkB,WAAWD,EAAEE,OAAOL,UAGrC,yBAAKH,UAAU,OACb,4BACEG,MAAM,IACNM,QAAS,SAAAH,GACP,OAAOjB,EAAMqB,OAAOJ,EAAEE,OAAOL,SAHjC,WAQA,4BACEA,MAAM,IACNM,QAAS,SAAAH,GACP,OAAOjB,EAAMqB,OAAOJ,EAAEE,OAAOL,SAHjC,cASF,yBAAKH,UAAU,MACb,4BAAKN,GACL,4BAAKL,EAAMsB,SACX,4BAAKrB,Q,iBCFAsB,EAtDH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACHC,GADG,aAEQD,qBAFR,mBAETE,EAFS,KAEHC,EAFG,OAGQH,qBAHR,mBAGTnB,EAHS,KAGHuB,EAHG,OAIgBJ,qBAJhB,mBAITvB,EAJS,KAIC4B,EAJD,OAKUL,qBALV,gCAMUA,sBANV,gCAOUA,sBAPV,gCAQUA,sBARV,mBAQTlB,EARS,KAQFwB,EARE,OAScN,qBATd,mBASTF,EATS,KASAS,EATA,OAUYP,mBAAS,oCAVrB,mBAUTQ,EAVS,UAoChB,OACE,oCACE,yBAAKrB,UAAU,QACb,kBAAC,EAAD,CAEEN,KAAMA,EACNa,WA9BW,SAAAQ,GACjBC,EAAQD,GACRvB,QAAQC,IAAIsB,IA6BNL,OA1BO,SAAAf,GACb,QAAaJ,IAATwB,EAAoB,6CACtB,4BAAAO,EAAA,sEACoBC,IAAMC,IAAN,4DACqCT,EADrC,kBACmDM,IAFvE,OACQI,EADR,OAIEX,EAAQW,GACRjC,QAAQC,IAAIgC,EAAIC,MAChBV,EAAQ,IACRC,EAAQQ,EAAIC,KAAKC,KAAKjC,MACtB0B,EAAWK,EAAIC,KAAKf,QAAQ,GAAGgB,MAC/BT,EAAYO,EAAIC,KAAKC,KAAKrC,UAC1B6B,EAASxB,GACTH,QAAQC,IAAIE,GAXd,6CADsB,uBAAC,WAAD,wBActBiC,KAYIxB,IAAKW,EACLJ,QAASA,EACTrB,SAAUA,EACVK,MAAOA,OC1CGkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.a6fa85ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport \"../App.css\";\n\nconst Inner = props => {\n  // const option = props.data.map((c, index) => {\n  //   return (\n  //     <option key={index} value={index}>\n  //       {c.name}\n  //     </option>\n  //   );\n  // });\n  const humidity =\n    props.humidity !== undefined ? `Humidity : ${props.humidity}` : \"\";\n\n  console.log(humidity);\n  const temp =\n    props.temp !== undefined\n      ? props.btnid == 0\n        ? `${Math.round(props.temp - 273.15) + String.fromCharCode(176)}C`\n        : `${1.8 * (Math.round(props.temp) - 273) + 32}F`\n      : \"\";\n\n  return (\n    <>\n      <div className=\"innerDiv\">\n        {/* <select\n          className=\"select\"\n          onChange={e => {\n            return props.handlechange(e.target.value);\n          }}\n        >\n          {option}\n        </select> */}\n        <input\n          className=\"select\"\n          type=\"text\"\n          placeholder=\"Enter City\"\n          value={props.val}\n          onChange={e => {\n            return props.cityChange(e.target.value);\n          }}\n        />\n        <div className=\"btn\">\n          <button\n            value=\"0\"\n            onClick={e => {\n              return props.search(e.target.value);\n            }}\n          >\n            Celcius\n          </button>\n          <button\n            value=\"1\"\n            onClick={e => {\n              return props.search(e.target.value);\n            }}\n          >\n            Farehheit\n          </button>\n        </div>\n        <div className=\"h1\">\n          <h1>{temp}</h1>\n          <h1>{props.weather}</h1>\n          <h1>{humidity}</h1>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Inner;\n","import React, { Component, useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Inner from \"./components/Inner\";\nimport Bottom from \"./components/Bottom\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [city, setCity] = useState();\n  const [temp, setTemp] = useState();\n  const [humidity, setHumidity] = useState();\n  const [temp1, setTemp1] = useState();\n  const [temp2, setTemp2] = useState();\n  const [temp3, setTemp3] = useState();\n  const [btnid, setBtnid] = useState();\n  const [weather, setWeather] = useState();\n  const [apiKey, setApiKey] = useState(\"8e3083e5c543a952a15e3e8852f2599e\");\n\n  const cityChange = city => {\n    setCity(city);\n    console.log(city);\n  };\n\n  const search = btnid => {\n    if (city !== undefined) {\n      async function getData() {\n        const res = await axios.get(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\n        );\n        setData(res);\n        console.log(res.data);\n        setCity(\"\");\n        setTemp(res.data.main.temp);\n        setWeather(res.data.weather[0].main);\n        setHumidity(res.data.main.humidity);\n        setBtnid(btnid);\n        console.log(btnid);\n      }\n      getData();\n      //console.log(data);\n    }\n  };\n  return (\n    <>\n      <div className=\"main\">\n        <Inner\n          //handlechange={handleChange}\n          temp={temp}\n          cityChange={cityChange}\n          search={search}\n          val={city}\n          weather={weather}\n          humidity={humidity}\n          btnid={btnid}\n        />\n        {/* <Bottom temp1={temp1} temp2={temp2} temp3={temp3} /> */}\n      </div>\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}